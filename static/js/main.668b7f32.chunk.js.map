{"version":3,"sources":["api.ts","components/UserAddres/UserAddres.tsx","components/UserInfo/UserInfo.tsx","components/Comment/Comment.tsx","components/CommentsList/CommentsList.tsx","components/Post/Post.tsx","components/PostsList/PostsList.tsx","App.tsx","index.tsx"],"names":["getData","url","a","fetch","then","response","json","UserAddress","address","className","street","suite","city","zipcode","geo","lat","lng","UserInfo","userData","username","name","Comment","comment","href","email","body","CommentsList","comments","map","key","id","Post","post","user","title","PostsList","posts","useState","postsList","setFilter","type","onChange","event","value","currentTarget","filteredList","filter","includes","placeholder","App","fullPosts","setFullPosts","isLoading","switchIsLoading","getFullPosts","users","preperedPosts","find","userId","postId","length","onClick","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.668b7f32.chunk.js","sourcesContent":["export const PostsURL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/posts.json';\nexport const UsersURL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/users.json';\nexport const CommentsURL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/comments.json';\n\nexport const getData = async (url: string) => (\n  fetch(url)\n    .then(response => response.json())\n);\n","import React from 'react';\nimport { Address } from '../../Interfaces/Interfaces';\n\nimport './UserAddress.css';\n\ntype Props = {\n  address: Address;\n};\n\nexport const UserAddress: React.FC<Props> = ({ address }) => (\n  <div className=\"user__address\">\n    <span>{address.street}</span>\n    &nbsp;\n    <span>{address.suite}</span>\n    &nbsp;\n    <span>{address.city}</span>\n    &nbsp;\n    <span>{address.zipcode}</span>\n    &nbsp;\n    <span>\n      {address.geo.lat}\n      &nbsp;\n      {address.geo.lng}\n    </span>\n  </div>\n);\n","import React from 'react';\nimport { User } from '../../Interfaces/Interfaces';\nimport { UserAddress } from '../UserAddres/UserAddres';\n\nimport './User.css';\n\ntype Props = {\n  userData: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ userData }) => (\n  <>\n    <h4 className=\"user__username\">{userData.username}</h4>\n    <p className=\"user__name\">{userData.name}</p>\n    <UserAddress address={userData.address} />\n  </>\n);\n","import React from 'react';\nimport { CommentInterface } from '../../Interfaces/Interfaces';\n\nimport './Comment.css';\n\ntype Props = {\n  comment: CommentInterface;\n};\n\nexport const Comment: React.FC<Props> = ({ comment }) => (\n  <>\n    <h4 className=\"comment__name\">{comment.name}</h4>\n    <a className=\"comment__link\" href={comment.email}>{comment.email}</a>\n    <p className=\"comment__text\">{comment.body}</p>\n  </>\n);\n","import React from 'react';\nimport { CommentInterface } from '../../Interfaces/Interfaces';\n\nimport { Comment } from '../Comment/Comment';\n\nimport './CommentsList.css';\n\ntype Props = {\n  comments: CommentInterface[];\n};\n\nexport const CommentsList: React.FC<Props> = ({ comments }) => (\n  <ul className=\"comments-list\">\n    {comments.map(comment => (\n      <li key={comment.id} className=\"comment-list__item comment\">\n        <Comment comment={comment} />\n      </li>\n    ))}\n  </ul>\n);\n","import React from 'react';\nimport { FullPost } from '../../Interfaces/Interfaces';\nimport { UserInfo } from '../UserInfo/UserInfo';\nimport { CommentsList } from '../CommentsList/CommentsList';\n\nimport './Post.css';\n\ntype Props = {\n  post: FullPost;\n};\n\nexport const Post: React.FC<Props> = ({ post }) => (\n  <>\n    <div className=\"post\">\n      <div className=\"post__user user\">\n        <UserInfo userData={post.user} />\n      </div>\n      <div className=\"post__info\">\n        <h3 className=\"post__title\">\n          {post.title}\n        </h3>\n        <p className=\"post__text\">\n          {post.body}\n        </p>\n      </div>\n    </div>\n    <CommentsList comments={post.comments} />\n  </>\n);\n","import React, { useState } from 'react';\nimport { FullPost } from '../../Interfaces/Interfaces';\n\nimport { Post } from '../Post/Post';\n\nimport './PostList.css';\n\ntype Props = {\n  posts: FullPost[];\n};\n\nexport const PostsList: React.FC<Props> = ({ posts }) => {\n  const [postsList, setFilter] = useState<FullPost[]>(posts);\n\n  const filter = (event: React.FormEvent<HTMLInputElement>) => {\n    const { value } = event.currentTarget;\n    const filteredList = [...posts].filter((post) => {\n      return post.body.includes(value) || post.title.includes(value);\n    });\n\n    setFilter(filteredList);\n  };\n\n  return (\n    <div>\n      <input\n        type=\"textarea\"\n        onChange={filter}\n        className=\"filter__input\"\n        placeholder=\"Search by title or body\"\n      />\n      <ul className=\"posts-list\">\n        {postsList.map(post => (\n          <li className=\"posts-list__item\" key={post.id}>\n            <Post post={post} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport {\n  getData,\n  PostsURL,\n  UsersURL,\n  CommentsURL,\n} from './api';\n\nimport {\n  FullPost,\n  Post,\n  User,\n  CommentInterface,\n} from './Interfaces/Interfaces';\nimport { PostsList } from './components/PostsList/PostsList';\n\nconst App: React.FC = () => {\n  const [fullPosts, setFullPosts] = useState<FullPost[]>([]);\n  const [isLoading, switchIsLoading] = useState<boolean>(false);\n\n  const getFullPosts = async () => {\n    switchIsLoading(true);\n    const users: User[] = await getData(UsersURL);\n    const posts: Post[] = await getData(PostsURL);\n    const comments: CommentInterface[] = await getData(CommentsURL);\n    const preperedPosts: FullPost[] = posts.map((post: Post) => ({\n      ...post,\n      user: users.find((user: User) => user.id === post.userId) as unknown as User,\n      comments: comments.filter((comment: CommentInterface) => comment.postId === post.id),\n    }));\n\n    switchIsLoading(false);\n    setFullPosts(preperedPosts);\n  };\n\n  return (\n    <div className=\"App\">\n      {\n        fullPosts.length\n          ? <PostsList posts={fullPosts} />\n          : (\n            <button\n              className=\"btn\"\n              type=\"button\"\n              onClick={getFullPosts}\n              disabled={isLoading}\n            >\n              {`${isLoading ? 'Loading...' : 'Load'}`}\n            </button>\n          )\n      }\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}